@page
@* Razor Page에서 PageModel 파생 클래스를 사용할 수 있게만듬*@
@model RazorPagesMovie.Pages.Movies.IndexModel

@*Page Model 기본 클래스에는 데이터를 뷰에 전달하는데 사용할 수 있는 ViewData 사전 속성이 있다.

*@
@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>

<p>
    <a asp-page="Create">Create New</a>
</p>
<form>
    <p>
        Title: <input type="text" asp-for="SearchString" />
        <input type="submit" value="Filter" />
    </p>
</form>
<table class="table">
    <thead>
        <tr>
            <th>
                @*DisplayNameFor HTML도우미는 람다 식에서 참조되는 Title 속성을 검사하여 표시 이름을 확인.(계산이 아니라 검사된다)
                    즉 model, model.movie또는 model.Movie[0]가 null이거나 비어 있을 경우 엑서스 위반이 없다.
                    계산된 경우@Html.DisplayFor(modelItem => item.Title) 사용)
                *@
                @Html.DisplayNameFor(model => model.Movie[0].Title)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].ReleaseDate)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Genre)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Movie[0].Price)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model.Movie) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Title)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReleaseDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Genre)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                <a asp-page="./Edit" asp-route-id="@item.ID">Edit</a> |
                <a asp-page="./Details" asp-route-id="@item.ID">Details</a> |
                <a asp-page="./Delete" asp-route-id="@item.ID">Delete</a>
            </td>
        </tr>
}
    </tbody>
</table>
